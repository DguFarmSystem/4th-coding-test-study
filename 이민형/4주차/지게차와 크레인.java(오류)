class Solution {
    void bfs(String[][] map, String request, int x, int y, int[][] visited) {
        if (visited[x][y] == 1) {
            return;
        }
        else {
            visited[x][y] = 1;
        }
        
        
        if (map[x][y].equals(request)) { // 정답이라면
            map[x][y] = "None";
            return;
        }
        else if (map[x][y].equals("None")) { // 다음 길
            if (y != map[0].length - 1) { // 오른쪽
                bfs(map, request, x, y + 1, visited);
                visited[x][y+1] = 0;
            }
            if (y != 0) { // 왼쪽
                bfs(map, request, x, y - 1, visited);
                visited[x][y-1] = 0;
            }
            if (x != 0) { // 위
                bfs(map, request, x - 1, y, visited);
                visited[x-1][y] = 0;
            }
            if (x != map.length - 1) { // 아래
                bfs(map, request, x + 1, y, visited);
                visited[x+1][y] = 0;
            }
        }
        else { // 아무것도 아니라면
            return;
        }
    }
    
    void load(String[][] map, String request, int[][] visited) {
        for (int i = 0; i < request.length(); i++) {
            if (request.length() == 2) { // 2개 일 때
                for (int j = 0; j < map.length; j++) {
                    for (int k = 0; k < map[j].length; k++) {
                        if (map[j][k].equals(request.split("")[0])) {
                            map[j][k] = "None";
                        }
                    }
                }
            }
            else { // 1개 일 때
                for (int j = 0; j < map.length; j++) {
                    if (map[j][0].equals("None")) { // 첫 번째 세로줄
                        bfs(map, request, j, 0, visited);
                        visited[j][0] = 0;
                    }
                    else if (map[j][0].equals(request)) {
                        map[j][0] = "None";
                    }
                    
                    if (map[j][map[j].length - 1].equals("None")) { // 마지막 세로줄
                        bfs(map, request, j, map[j].length - 1, visited);
                        visited[j][map[j].length - 1] = 0;
                    }
                    else if (map[j][map[j].length - 1].equals(request)) {
                        map[j][map[j].length - 1] = "None";
                    }
                }
                for (int j = 0; j < map[0].length; j++) { 
                    if (map[0][j].equals("None")) { // 첫 번째 가로줄
                        bfs(map, request, 0, j, visited);
                        visited[0][j] = 0;
                    }
                    else if (map[0][j].equals(request)) {
                        map[0][j] = "None";
                    }
                    
                    if (map[map.length - 1][j].equals("None")) { // 마지막 가로줄
                        bfs(map, request, map.length - 1, j, visited);
                        visited[map.length - 1][j] = 0;
                    }
                    else if (map[map.length - 1][j].equals(request)) {
                        map[map.length - 1][j] = "None";
                    }
                }
            }
        }
    }
    
    public int solution(String[] storage, String[] requests) {
        int answer = 0;
        
        String[][] map = new String[storage.length][storage[0].length()];
        int[][] visited = new int[map.length][map[0].length]; // 들렀으면 1, 아니면 0
        
        for (int i = 0; i < storage.length; i++) {
            for (int j = 0; j < storage[i].length(); j++) {
                map[i][j] = storage[i].split("")[j]; // map 만들기
            }
        }
        
        for (int i = 0; i < requests.length; i++) {
            load(map, requests[i], visited); // 짐 뺴기 시작
        }
        
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[0].length; j++) {
                if (map[i][j].equals("None")) {
                    answer++;
                }
            }
        }
        
        return answer;
    }
}
